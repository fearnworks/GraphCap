# SPDX-License-Identifier: Apache-2.0
name: graphcap Server CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ "main", "dev", "feature/*", "ci" ]
    paths:
      - 'server/**'
      - 'pyproject.toml'
      - 'pytest.ini'
      - 'tests/server_tests/**'
      - '.github/workflows/server-build.yml'
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main", "ci" ]
    paths:
      - 'server/**'
      - 'pyproject.toml'
      - 'pytest.ini'
      - 'tests/server_tests/**'
      - '.github/workflows/server-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install Ruff
        run: pip install ruff
      - name: Run Ruff
        continue-on-error: true
        run: |
          ruff check --select ALL ./server/server --output-format=github > ruff_report.txt || true
          ruff format --check ./server/server >> ruff_report.txt || true
          cat ruff_report.txt
          echo "::warning::Linting issues found. See report for details."
      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-lint-report
          path: ruff_report.txt
          retention-days: 14

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Setup test environment
        run: |
          uv venv
          uv pip install --upgrade pip
          uv sync
          uv pip install -e "lib[test]"
          uv pip install -e "server[test]"
      - name: Run tests
        run: |
          uv run pytest tests/server_tests -v -m "not integration" --cov=server

  deploy:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
      
      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=sha,prefix=,suffix=,format=short

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./server/Dockerfile.server
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64